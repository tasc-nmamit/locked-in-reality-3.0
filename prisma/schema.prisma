// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id       String  @id @default(cuid())
  name     String?
  email    String? @unique
  password String?
  image    String? @default("https://github.com/shadcn.png")

  round1 Int @default(1)

  role Role @default(USER)

  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]

  submissions Submission[]
  qrCodes     QRCode[]
  progress    Progress[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model AppSettings {
  id     Int     @id @default(autoincrement()) // TODO - Int for cockroachdb
  round1 Boolean @default(false)
  round2 Boolean @default(false)

  round1Start DateTime?
}

model Rounds {
  id   Int    @id @default(autoincrement()) // TODO - Int for cockroachdb
  name String
  //   description String?

  questions Question[]
}

model Question {
  id String @id @default(cuid())

  question String

  codeId String?
  code   Code?   @relation(fields: [codeId], references: [id], onDelete: Cascade)

  hint    String?
  options Options[]

  maxPoints Int

  level Int @default(1)

  roundId     Int // TODO - Int for cockroachdb
  round       Rounds       @relation(fields: [roundId], references: [id], onDelete: Cascade)
  submissions Submission[]
}

model Code {
  id String @id @default(cuid())

  code     String
  language String
  Question Question[]
}

model Options {
  id String @id @default(cuid())

  option    String
  code      String?
  isCorrect Boolean @default(false)

  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  // Submission Submission[]
}

model Submission {
  id String @id @default(cuid())

  points   Int     @default(0)
  status   Status  @default(PENDING)
  hintUsed Boolean @default(false)

  selectedOptionId String?
  // selectedOption   Options? @relation(fields: [selectedOptionId], references: [id], onDelete: SetNull)

  questionId String?
  question   Question? @relation(fields: [questionId], references: [id], onDelete: SetNull)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Location {
  id   String @id @default(cuid())
  name String
  qrCodes QRCode[]
}

model QRCode {
  id         String @id @default(cuid())
  code       Int?
  order      Int?
  hint       String?
  team       User? @relation(fields: [teamId], references: [id], onDelete: SetNull)
  location   Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  progress   Progress?

  teamId     String?
  locationId String
  progressId String?
}

model Progress {
  id String @id @default(cuid())
  completed Boolean @default(false)
  team User @relation(fields: [teamId], references: [id], onDelete: Cascade)
  qrCode QRCode @relation(fields: [qrCodeId], references: [id], onDelete: Cascade)

  teamId String
  qrCodeId String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  USER
}

enum Status {
  PENDING
  SUBMITTED
  SKIPPED
}
